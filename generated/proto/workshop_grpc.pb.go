// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: workshop.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BangunDatar_HitungLuasPersegi_FullMethodName = "/proto.BangunDatar/HitungLuasPersegi"
)

// BangunDatarClient is the client API for BangunDatar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BangunDatarClient interface {
	HitungLuasPersegi(ctx context.Context, in *RequestHitungLuasPersegi, opts ...grpc.CallOption) (*ResponseLuasPersegi, error)
}

type bangunDatarClient struct {
	cc grpc.ClientConnInterface
}

func NewBangunDatarClient(cc grpc.ClientConnInterface) BangunDatarClient {
	return &bangunDatarClient{cc}
}

func (c *bangunDatarClient) HitungLuasPersegi(ctx context.Context, in *RequestHitungLuasPersegi, opts ...grpc.CallOption) (*ResponseLuasPersegi, error) {
	out := new(ResponseLuasPersegi)
	err := c.cc.Invoke(ctx, BangunDatar_HitungLuasPersegi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BangunDatarServer is the server API for BangunDatar service.
// All implementations should embed UnimplementedBangunDatarServer
// for forward compatibility
type BangunDatarServer interface {
	HitungLuasPersegi(context.Context, *RequestHitungLuasPersegi) (*ResponseLuasPersegi, error)
}

// UnimplementedBangunDatarServer should be embedded to have forward compatible implementations.
type UnimplementedBangunDatarServer struct {
}

func (UnimplementedBangunDatarServer) HitungLuasPersegi(context.Context, *RequestHitungLuasPersegi) (*ResponseLuasPersegi, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitungLuasPersegi not implemented")
}

// UnsafeBangunDatarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BangunDatarServer will
// result in compilation errors.
type UnsafeBangunDatarServer interface {
	mustEmbedUnimplementedBangunDatarServer()
}

func RegisterBangunDatarServer(s grpc.ServiceRegistrar, srv BangunDatarServer) {
	s.RegisterService(&BangunDatar_ServiceDesc, srv)
}

func _BangunDatar_HitungLuasPersegi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestHitungLuasPersegi)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BangunDatarServer).HitungLuasPersegi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BangunDatar_HitungLuasPersegi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BangunDatarServer).HitungLuasPersegi(ctx, req.(*RequestHitungLuasPersegi))
	}
	return interceptor(ctx, in, info, handler)
}

// BangunDatar_ServiceDesc is the grpc.ServiceDesc for BangunDatar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BangunDatar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BangunDatar",
	HandlerType: (*BangunDatarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HitungLuasPersegi",
			Handler:    _BangunDatar_HitungLuasPersegi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workshop.proto",
}
